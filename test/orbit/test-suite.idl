// Yes, this is an absurd and stupid example.  I tried. :)

module Fruit {
	enum Color { orange, red, yellow, green };

	struct Properties {
		string name;
		Color color;
	};

	typedef sequence<long> seq;

	interface Factory;
	interface Instance {
		readonly attribute Properties fruit;
		readonly attribute short left;

		exception AllEaten {};
		exception BigBite { short too_much_by; };
		void bite(in short size) raises (BigBite, AllEaten);
		Factory get_factory();
	};

	typedef sequence<Properties> fruits;

	interface Factory {
		attribute fruits fruit_list;

		exception AlreadyExists {};
		void add_fruit(in Properties f) raises (AlreadyExists);
		Instance get_instance(in Properties fruit);
		oneway void discard_instance(in Instance i);

		short get_random_fruit(out Properties fruit);

		// Okay, I ran out of fruit ideas for this stuff. :)
		const double pi = 3.141592653;
		union TestUnion switch (Color) {
			case orange: string a;
			case red: short b;
			case yellow: float c;
			case green: boolean d;
		};

		TestUnion test_union(in Color color);
		any test_any();

		seq test_list(in long n);
		void die();
	};
};
